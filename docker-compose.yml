services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    env_file:
      - .env
    depends_on:
      - redis
      - mongodb
    networks:
      - app-network
    restart: always
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=yourpassword
    healthcheck:
      test: ['CMD', 'mongo', '--eval', 'db.runCommand({ connectionStatus: 1 })']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  mongodb_data:

networks:
  app-network:
    driver: bridge
